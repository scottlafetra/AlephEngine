#pragma once
#include "../Rotates.h"

// Make testcube life easier
//				Name				       Verticies
#define CUBE_VERT_FRONT_BOTTOM_RIGHT	-0.5f,	-0.5f,	 0.5f
#define CUBE_VERT_FRONT_BOTTOM_LEFT		 0.5f,	-0.5f,	 0.5f
#define CUBE_VERT_FRONT_TOP_RIGHT		-0.5f,	 0.5f,	 0.5f
#define CUBE_VERT_FRONT_TOP_LEFT		 0.5f,	 0.5f,	 0.5f
#define CUBE_VERT_BACK_BOTTOM_RIGHT		-0.5f,	-0.5f,	-0.5f
#define CUBE_VERT_BACK_BOTTOM_LEFT		 0.5f,	-0.5f,	-0.5f
#define CUBE_VERT_BACK_TOP_RIGHT		-0.5f,	 0.5f,	-0.5f
#define CUBE_VERT_BACK_TOP_LEFT			 0.5f,	 0.5f,	-0.5f

// CAT_TEX_FACENAME_DEFINING_COORD
//				Name				  tex coord
#define CAT_TEX_FRONT_TOP_RIGHT       0.50f,	0.50f
#define CAT_TEX_FRONT_TOP_LEFT        0.25f,	0.50f
#define CAT_TEX_FRONT_BOTTOM_RIGHT    0.50f,	0.75f
#define CAT_TEX_FRONT_BOTTOM_LEFT     0.25f,	0.75f
#define CAT_TEX_RIGHT_TOP			  0.75f,	0.50f
#define CAT_TEX_RIGHT_BOTTOM		  0.75f,	0.75f
#define CAT_TEX_LEFT_TOP			  0.00f,	0.50f
#define CAT_TEX_LEFT_BOTTOM			  0.00f,	0.75f
#define CAT_TEX_BOTTOM_LEFT			  0.25f,	1.00f
#define CAT_TEX_BOTTOM_RIGHT		  0.50f,	1.00f
#define CAT_TEX_TOP_LEFT			  0.25f,	0.25f
#define CAT_TEX_TOP_RIGHT			  0.50f,	0.25f
#define CAT_TEX_BACK_LEFT			  0.25f,	0.00f
#define CAT_TEX_BACK_RIGHT			  0.50f,	0.00f



// Colors		  RGB data
#define RED		1.f, 0.f, 0.f
#define GREEN	0.f, 1.f, 0.f
#define BLUE	0.f, 0.f, 1.f

#define CYAN	0.f, 1.f, 1.f
#define MAGENTA	1.f, 0.f, 1.f
#define YELLOW	1.f, 1.f, 0.f

static const struct
{
	float x, y, z;			float r, g, b;
}
testTri[ 3 ] =
{//	      Verticies             Colors
	{ -0.6f, -0.4f, 0.f,	RED },
	{ 0.6f, -0.4f, 0.f,	GREEN },
	{ 0.f,  0.6f, 0.f,	BLUE }
},
testQuad[ 6 ] =
{
	{ -0.5f, -0.5f, 0.0f, RED },
	{ -0.5f,  0.5f, 0.0f, GREEN },
	{  0.5f,  0.5f, 0.0f, BLUE },
					   
	{  0.5f,  0.5f, 0.0f, BLUE },
	{  0.5f, -0.5f, 0.0f, YELLOW },
	{ -0.5f, -0.5f, 0.0f, RED },
},
testCube[ 3 * 2 * 6 ] =
{
	// Face 1
	{ CUBE_VERT_FRONT_TOP_LEFT,		RED },
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	RED },
	{ CUBE_VERT_FRONT_BOTTOM_RIGHT,	RED },

	{ CUBE_VERT_FRONT_BOTTOM_RIGHT,	RED },
	{ CUBE_VERT_FRONT_TOP_RIGHT,	RED },
	{ CUBE_VERT_FRONT_TOP_LEFT,		RED },

	// Face 2
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	GREEN },
	{ CUBE_VERT_BACK_BOTTOM_LEFT,	GREEN },
	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	GREEN },

	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	GREEN },
	{ CUBE_VERT_FRONT_BOTTOM_RIGHT,	GREEN },
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	GREEN },

	// Face 3
	{ CUBE_VERT_FRONT_TOP_RIGHT,	BLUE },
	{ CUBE_VERT_FRONT_BOTTOM_RIGHT, BLUE },
	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	BLUE },

	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	BLUE },
	{ CUBE_VERT_BACK_TOP_RIGHT,		BLUE },
	{ CUBE_VERT_FRONT_TOP_RIGHT,	BLUE },

	// Face 4
	{ CUBE_VERT_FRONT_TOP_LEFT,		CYAN },
	{ CUBE_VERT_BACK_TOP_LEFT,		CYAN },
	{ CUBE_VERT_BACK_BOTTOM_LEFT,	CYAN },

	{ CUBE_VERT_BACK_BOTTOM_LEFT,	CYAN },
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	CYAN },
	{ CUBE_VERT_FRONT_TOP_LEFT,		CYAN },

	// Face 5
	{ CUBE_VERT_FRONT_TOP_LEFT,		MAGENTA },
	{ CUBE_VERT_FRONT_TOP_RIGHT,	MAGENTA },
	{ CUBE_VERT_BACK_TOP_RIGHT,		MAGENTA },

	{ CUBE_VERT_BACK_TOP_RIGHT,		MAGENTA },
	{ CUBE_VERT_BACK_TOP_LEFT,		MAGENTA },
	{ CUBE_VERT_FRONT_TOP_LEFT,		MAGENTA },

	// Face 6
	{ CUBE_VERT_BACK_TOP_LEFT,		YELLOW },
	{ CUBE_VERT_BACK_TOP_RIGHT,		YELLOW },
	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	YELLOW },

	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	YELLOW },
	{ CUBE_VERT_BACK_BOTTOM_LEFT,	YELLOW },
	{ CUBE_VERT_BACK_TOP_LEFT,		YELLOW }
};

static const struct
{
	float x, y, z;			float u, v;
}
catCube[ 3 * 2 * 6 ] =
{
	// Face 1
	{ CUBE_VERT_FRONT_TOP_LEFT,		CAT_TEX_FRONT_TOP_LEFT },
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	CAT_TEX_FRONT_BOTTOM_LEFT },
	{ CUBE_VERT_FRONT_BOTTOM_RIGHT,	CAT_TEX_FRONT_BOTTOM_RIGHT },

	{ CUBE_VERT_FRONT_BOTTOM_RIGHT,	CAT_TEX_FRONT_BOTTOM_RIGHT },
	{ CUBE_VERT_FRONT_TOP_RIGHT,	CAT_TEX_FRONT_TOP_RIGHT },
	{ CUBE_VERT_FRONT_TOP_LEFT,		CAT_TEX_FRONT_TOP_LEFT },

	// Face 2
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	CAT_TEX_FRONT_BOTTOM_LEFT },
	{ CUBE_VERT_BACK_BOTTOM_LEFT,	CAT_TEX_BOTTOM_LEFT },
	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	CAT_TEX_BOTTOM_RIGHT },

	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	CAT_TEX_BOTTOM_RIGHT },
	{ CUBE_VERT_FRONT_BOTTOM_RIGHT,	CAT_TEX_FRONT_BOTTOM_RIGHT },
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	CAT_TEX_FRONT_BOTTOM_LEFT },

	// Face 3
	{ CUBE_VERT_FRONT_TOP_RIGHT,	CAT_TEX_FRONT_TOP_RIGHT },
	{ CUBE_VERT_FRONT_BOTTOM_RIGHT, CAT_TEX_FRONT_BOTTOM_RIGHT },
	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	CAT_TEX_RIGHT_BOTTOM },

	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	CAT_TEX_RIGHT_BOTTOM },
	{ CUBE_VERT_BACK_TOP_RIGHT,		CAT_TEX_RIGHT_TOP },
	{ CUBE_VERT_FRONT_TOP_RIGHT,	CAT_TEX_FRONT_TOP_RIGHT },

	// Face 4
	{ CUBE_VERT_FRONT_TOP_LEFT,		CAT_TEX_FRONT_TOP_LEFT },
	{ CUBE_VERT_BACK_TOP_LEFT,		CAT_TEX_LEFT_TOP },
	{ CUBE_VERT_BACK_BOTTOM_LEFT,	CAT_TEX_LEFT_BOTTOM },

	{ CUBE_VERT_BACK_BOTTOM_LEFT,	CAT_TEX_LEFT_BOTTOM },
	{ CUBE_VERT_FRONT_BOTTOM_LEFT,	CAT_TEX_FRONT_BOTTOM_LEFT },
	{ CUBE_VERT_FRONT_TOP_LEFT,		CAT_TEX_FRONT_TOP_LEFT },

	// Face 5
	{ CUBE_VERT_FRONT_TOP_LEFT,		CAT_TEX_FRONT_TOP_LEFT },
	{ CUBE_VERT_FRONT_TOP_RIGHT,	CAT_TEX_FRONT_TOP_RIGHT },
	{ CUBE_VERT_BACK_TOP_RIGHT,		CAT_TEX_TOP_RIGHT },

	{ CUBE_VERT_BACK_TOP_RIGHT,		CAT_TEX_TOP_RIGHT },
	{ CUBE_VERT_BACK_TOP_LEFT,		CAT_TEX_TOP_LEFT },
	{ CUBE_VERT_FRONT_TOP_LEFT,		CAT_TEX_FRONT_TOP_LEFT },

	// Face 6
	{ CUBE_VERT_BACK_TOP_LEFT,		CAT_TEX_TOP_LEFT },
	{ CUBE_VERT_BACK_TOP_RIGHT,		CAT_TEX_TOP_RIGHT },
	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	CAT_TEX_BACK_RIGHT },

	{ CUBE_VERT_BACK_BOTTOM_RIGHT,	CAT_TEX_BACK_RIGHT },
	{ CUBE_VERT_BACK_BOTTOM_LEFT,	CAT_TEX_BACK_LEFT },
	{ CUBE_VERT_BACK_TOP_LEFT,		CAT_TEX_TOP_LEFT }
},
texQuad[ 6 ] = 
{//	  Verticies					    tex coord
	{ -0.5f, -0.5f, 0.0f,	0.0f, 1.0f },
	{ -0.5f,  0.5f, 0.0f,	0.0f, 0.0f },
	{  0.5f,  0.5f, 0.0f,	1.0f, 0.0f },
						 	
	{  0.5f,  0.5f, 0.0f,	1.0f, 0.0f },
	{  0.5f, -0.5f, 0.0f,	1.0f, 1.0f },
	{ -0.5f, -0.5f, 0.0f,	0.0f, 1.0f }
};

// Test Components
class Tester1 : public Component
{
public:
	Tester1( Entity* entity )
		: Component( entity, Type<Tester1>() )
	{
	}

	void CauseError()
	{
		Error( "Tester1 Error" );
	}
};

class Tester2 : public Component
{
public:
	Tester2( Entity* entity )
		: Component( entity, Type<Tester2>() )
	{
	}

	void CauseFatalError()
	{
		FatalError( "Tester2 Fatal Error" );
	}
};